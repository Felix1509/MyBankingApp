@model MyBankingApp.Web.ViewModels.CreateTransactionVM
@{
    ViewBag.Title = "Neue Überweisung";
}

<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css">

<style type="text/css">
    .page-header {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        color: white;
        padding: 30px;
        border-radius: 15px;
        margin-bottom: 30px;
        box-shadow: 0 10px 30px rgba(0, 0, 0, 0.2);
    }

        .page-header h1 {
            margin: 0;
            font-size: 2rem;
            font-weight: 300;
        }

    .form-section {
        background: white;
        border-radius: 15px;
        padding: 30px;
        box-shadow: 0 5px 20px rgba(0, 0, 0, 0.08);
    }

    .form-group {
        margin-bottom: 20px;
    }

    .form-label {
        font-weight: 600;
        color: #374151;
        margin-bottom: 8px;
        display: block;
    }

    .form-control {
        width: 100%;
        padding: 10px 15px;
        border: 1px solid #e5e7eb;
        border-radius: 8px;
        font-size: 1rem;
        transition: border-color 0.2s;
    }

        .form-control:focus {
            outline: none;
            border-color: #667eea;
            box-shadow: 0 0 0 3px rgba(102, 126, 234, 0.1);
        }

    .btn-submit {
        background: #10b981;
        color: white;
        padding: 12px 30px;
        border-radius: 8px;
        border: none;
        font-weight: 600;
        font-size: 1rem;
        cursor: pointer;
        transition: all 0.2s ease;
    }

        .btn-submit:hover {
            background: #059669;
            transform: translateY(-1px);
        }

    .btn-cancel {
        background: #6b7280;
        color: white;
        padding: 12px 30px;
        border-radius: 8px;
        border: none;
        font-weight: 600;
        font-size: 1rem;
        cursor: pointer;
        transition: all 0.2s ease;
        text-decoration: none;
        display: inline-block;
    }

        .btn-cancel:hover {
            background: #4b5563;
            text-decoration: none;
            color: white;
        }

    .amount-input {
        font-size: 1.25rem;
        font-weight: 600;
    }

    .validation-error {
        color: #ef4444;
        font-size: 0.875rem;
        margin-top: 5px;
    }

    .info-box {
        background: #f0f9ff;
        border: 1px solid #3b82f6;
        border-radius: 8px;
        padding: 15px;
        margin-bottom: 20px;
    }

        .info-box i {
            color: #3b82f6;
            margin-right: 10px;
        }
</style>

<div class="container">
    <div class="page-header">
        <h1><i class="fas fa-paper-plane"></i> Neue Überweisung</h1>
    </div>

    @using (Html.BeginForm("Create", "Transaction", FormMethod.Post, new { @class = "transfer-form" }))
    {
        @Html.AntiForgeryToken()

        <div class="form-section">
            @if (!ViewData.ModelState.IsValid)
            {
                <div class="alert alert-danger">
                    @Html.ValidationSummary(false, "", new { @class = "m-0" })
                </div>
            }

            <div class="info-box">
                <i class="fas fa-info-circle"></i>
                <strong>Hinweis:</strong> Überweisungen werden sofort ausgeführt und können nicht rückgängig gemacht werden.
            </div>

            <div class="row">
                <div class="col-md-6">
                    <div class="form-group">
                        @Html.LabelFor(m => m.FromAccountId, new { @class = "form-label" })
                        @Html.DropDownListFor(m => m.FromAccountId,
                                 Model.AvailableAccounts ?? new SelectList(Enumerable.Empty<SelectListItem>()),
                                 "-- Konto wählen --",
                                 new { @class = "form-control" })
                        @Html.ValidationMessageFor(m => m.FromAccountId, "", new { @class = "validation-error" })
                    </div>
                </div>
                <div class="col-md-6">
                    <div class="form-group">
                        @Html.LabelFor(m => m.Amount, new { @class = "form-label" })
                        @Html.TextBoxFor(m => m.Amount, new { @class = "form-control amount-input", placeholder = "0,00" })
                        @Html.ValidationMessageFor(m => m.Amount, "", new { @class = "validation-error" })
                    </div>
                </div>
            </div>

            <hr />

            <div class="row">
                <div class="col-md-6">
                    <div class="form-group">
                        @Html.LabelFor(m => m.RecipientName, new { @class = "form-label" })
                        @Html.TextBoxFor(m => m.RecipientName, new { @class = "form-control", placeholder = "Max Mustermann" })
                        @Html.ValidationMessageFor(m => m.RecipientName, "", new { @class = "validation-error" })
                    </div>
                </div>
                <div class="col-md-6">
                    <div class="form-group">
                        @Html.LabelFor(m => m.RecipientIBAN, new { @class = "form-label" })
                        @Html.TextBoxFor(m => m.RecipientIBAN, new { @class = "form-control", placeholder = "DE89370400440532013000" })
                        @Html.ValidationMessageFor(m => m.RecipientIBAN, "", new { @class = "validation-error" })
                    </div>
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(m => m.Purpose, new { @class = "form-label" })
                @Html.TextAreaFor(m => m.Purpose, new { @class = "form-control", rows = 3, placeholder = "Verwendungszweck eingeben..." })
                @Html.ValidationMessageFor(m => m.Purpose, "", new { @class = "validation-error" })
            </div>

            <div class="row">
                <div class="col-md-4">
                    <div class="form-group">
                        @Html.LabelFor(m => m.TransactionDate, new { @class = "form-label" })
                        @Html.TextBoxFor(m => m.TransactionDate, "{0:yyyy-MM-dd}", new { @class = "form-control", type = "date" })
                        @Html.ValidationMessageFor(m => m.TransactionDate, "", new { @class = "validation-error" })
                    </div>
                </div>
                <div class="col-md-4">
                    <div class="form-group">
                        @Html.LabelFor(m => m.ValueDate, new { @class = "form-label" })
                        @Html.TextBoxFor(m => m.ValueDate, "{0:yyyy-MM-dd}", new { @class = "form-control", type = "date" })
                        @Html.ValidationMessageFor(m => m.ValueDate, "", new { @class = "validation-error" })
                    </div>
                </div>
                <div class="col-md-4">
                    <div class="form-group">
                        @Html.LabelFor(m => m.Category, new { @class = "form-label" })
                        @Html.TextBoxFor(m => m.Category, new { @class = "form-control", placeholder = "z.B. Miete, Einkauf..." })
                    </div>
                </div>
            </div>

            <hr />

            <div class="text-right">
                <a href="@Url.Action("Index", "Transaction")" class="btn-cancel">
                    <i class="fas fa-times"></i> Abbrechen
                </a>
                <button type="submit" class="btn-submit">
                    <i class="fas fa-check"></i> Überweisung ausführen
                </button>
            </div>
        </div>
    }
</div>

<script type="text/javascript">
    $(document).ready(function () {
        // Format amount input
        $('#Amount').on('blur', function () {
            var value = $(this).val().replace(',', '.');
            if (!isNaN(value) && value !== '') {
                $(this).val(parseFloat(value).toFixed(2).replace('.', ','));
            }
        });

        // IBAN formatting
        $('#RecipientIBAN').on('input', function () {
            var value = $(this).val().replace(/\s/g, '').toUpperCase();
            var formatted = value.match(/.{1,4}/g);
            if (formatted) {
                $(this).val(formatted.join(' '));
            }
        });

        // Set default dates
        if (!$('#TransactionDate').val()) {
            var today = new Date().toISOString().split('T')[0];
            $('#TransactionDate').val(today);
            $('#ValueDate').val(today);
        }
    });
</script>