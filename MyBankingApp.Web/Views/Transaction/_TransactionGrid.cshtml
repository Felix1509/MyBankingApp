@model List<MyBankingApp.Data.Entitites.Transaktion>

@if (Model != null && Model.Any())
{
    @Html.DevExpress().GridView(settings =>
        {
            settings.Name = "TransactionsGrid";
            settings.Width = System.Web.UI.WebControls.Unit.Percentage(100);

            // Callback Routes
            settings.CallbackRouteValues = new { Controller = "Transaction", Action = "TransactionGridCallback" };

            // Features
            settings.Settings.ShowFilterRow = true;
            settings.Settings.ShowGroupPanel = true;
            settings.Settings.ShowFooter = true;
            settings.Settings.ShowHeaderFilterButton = true;

            settings.SettingsBehavior.AllowSort = true;
            settings.SettingsBehavior.AllowGroup = true;
            settings.SettingsBehavior.AllowSelectByRowClick = true;

            // Paging
            settings.SettingsPager.PageSize = 20;
            settings.SettingsPager.Visible = true;
            settings.SettingsPager.PageSizeItemSettings.Visible = true;
            settings.SettingsPager.PageSizeItemSettings.Items = new string[] { "10", "20", "50", "100" };

            // Export
            settings.SettingsExport.EnableClientSideExportAPI = true;
            settings.SettingsExport.ExcelExportMode = DevExpress.Export.ExportType.WYSIWYG;

            // Columns
            settings.Columns.Add(column =>
            {
                column.FieldName = "Buchungsdatum";
                column.Caption = "Datum";
                column.Width = System.Web.UI.WebControls.Unit.Pixel(100);
                column.PropertiesEdit.DisplayFormatString = "dd.MM.yyyy";
                column.SortOrder = DevExpress.Data.ColumnSortOrder.Descending;
            });

            settings.Columns.Add(column =>
            {
                column.Caption = "Bank/Konto";
                column.Width = System.Web.UI.WebControls.Unit.Pixel(150);
                column.SetDataItemTemplateContent(c =>
                {
                    var bankkonto = DataBinder.Eval(c.DataItem, "Bankkonto");
                    if (bankkonto != null)
                    {
                        var bankname = DataBinder.Eval(bankkonto, "Bankname")?.ToString() ?? "";
                        var kontoinhaber = DataBinder.Eval(bankkonto, "Kontoinhaber")?.ToString() ?? "";
                        Html.ViewContext.Writer.Write(string.Format("<strong>{0}</strong><br/><small>{1}</small>", bankname, kontoinhaber));
                    }
                });
                column.Settings.AllowSort = DevExpress.Utils.DefaultBoolean.False;
            });

            settings.Columns.Add(column =>
            {
                column.FieldName = "Verwendungszweck";
                column.Caption = "Verwendungszweck";
                column.Width = System.Web.UI.WebControls.Unit.Percentage(30);
            });

            settings.Columns.Add(column =>
            {
                column.Caption = "Von/An";
                column.Width = System.Web.UI.WebControls.Unit.Percentage(20);
                column.SetDataItemTemplateContent(c =>
                {
                    var istGutschrift = (bool)DataBinder.Eval(c.DataItem, "IstGutschrift");

                    if (istGutschrift)
                    {
                        // Bei Gutschrift zeigen wir den Absender (wer hat uns das Geld geschickt)
                        var absender = DataBinder.Eval(c.DataItem, "AbsenderName")?.ToString() ?? "";
                        Html.ViewContext.Writer.Write(string.Format("<span><strong>Von:</strong> {0}</span>", absender));
                    }
                    else
                    {
                        // Bei Abbuchung zeigen wir den Empfänger (wem haben wir das Geld geschickt)
                        var empfaenger = DataBinder.Eval(c.DataItem, "EmpfaengerName")?.ToString() ?? "";
                        Html.ViewContext.Writer.Write(string.Format("<span><strong>An:</strong> {0}</span>", empfaenger));
                    }
                });
            });

            settings.Columns.Add(column =>
            {
                column.FieldName = "Kategorie";
                column.Caption = "Kategorie";
                column.Width = System.Web.UI.WebControls.Unit.Pixel(120);
                column.Settings.HeaderFilterMode = HeaderFilterMode.CheckedList;
            });

            settings.Columns.Add(column =>
            {
                column.FieldName = "Betrag";
                column.Caption = "Betrag";
                column.Width = System.Web.UI.WebControls.Unit.Pixel(120);
                column.PropertiesEdit.DisplayFormatString = "C";

                column.SetDataItemTemplateContent(c =>
                {
                    var betrag = (decimal)DataBinder.Eval(c.DataItem, "Betrag");
                    var istGutschrift = (bool)DataBinder.Eval(c.DataItem, "IstGutschrift");

                    if (istGutschrift)
                    {
                        // Gutschrift: Grün und positiv
                        Html.ViewContext.Writer.Write(string.Format("<strong class='text-success'>+{0:C}</strong>", Math.Abs(betrag)));
                    }
                    else
                    {
                        // Abbuchung: Rot und negativ
                        Html.ViewContext.Writer.Write(string.Format("<strong class='text-danger'>-{0:C}</strong>", Math.Abs(betrag)));
                    }
                });

                // Summary
                settings.TotalSummary.Add(DevExpress.Data.SummaryItemType.Sum, "Betrag").DisplayFormat = "Summe: {0:C}";
                settings.TotalSummary.Add(DevExpress.Data.SummaryItemType.Count, "Betrag").DisplayFormat = "Anzahl: {0}";
            });

            // Actions column
            settings.Columns.Add(column =>
            {
                column.Caption = "Aktionen";
                column.Width = System.Web.UI.WebControls.Unit.Pixel(80);
                column.Settings.AllowSort = DevExpress.Utils.DefaultBoolean.False;
                column.Settings.AllowHeaderFilter = DevExpress.Utils.DefaultBoolean.False;

                column.SetDataItemTemplateContent(c =>
                {
                    var transactionId = DataBinder.Eval(c.DataItem, "Id");
                    Html.ViewContext.Writer.Write(
                        string.Format("<a href='{0}' class='btn btn-sm btn-outline-primary' title='Details'><i class='fas fa-eye'></i></a>",
                        Url.Action("Details", "Transaction", new { id = transactionId }))
                    );
                });
            });

            // Styling
            settings.Styles.Header.BackColor = System.Drawing.Color.FromArgb(249, 250, 251);
            settings.Styles.Header.Font.Bold = true;
            settings.Styles.AlternatingRow.BackColor = System.Drawing.Color.FromArgb(248, 249, 250);
            settings.Styles.Footer.Font.Bold = true;
            settings.Styles.Footer.BackColor = System.Drawing.Color.FromArgb(249, 250, 251);

        }).Bind(Model).GetHtml()
}
else
{
    <div style="text-align: center; padding: 60px; color: #6b7280;">
        <i class="fas fa-search fa-4x" style="color: #e5e7eb; margin-bottom: 20px; display: block;"></i>
        <h3>Keine Transaktionen gefunden</h3>
        <p>Wählen Sie mindestens ein Konto aus, um Transaktionen anzuzeigen.</p>
    </div>
}

<style>
    .text-success {
        color: #10b981 !important;
    }

    .text-danger {
        color: #ef4444 !important;
    }

    .btn-outline-primary {
        color: #667eea;
        border: 1px solid #667eea;
        background: transparent;
    }

        .btn-outline-primary:hover {
            background: #667eea;
            color: white;
        }
</style>